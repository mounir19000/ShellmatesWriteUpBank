{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Maanjaro/ShellmatesWriteUpBank/src/components/header.tsx"],"sourcesContent":["\"use client\";\n\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\nimport { useState } from \"react\";\nimport Image from \"next/image\";\n\nconst navLinks = [\n  { name: \"Home\", path: \"/\" },\n  { name: \"How to submit\", path: \"/HowToSubmit\" },\n  { name: \"About\", path: \"/about\" },\n];\n\nconst Header = () => {\n  const pathname = usePathname();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  const toggleMenu = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  return (\n    <div className=\"flex justify-between items-center h-16 sm:h-20 px-5 sm:px-16 lg:px-28 shadow-md bg-black bg-opacity-90 relative\">\n      {/* Logo */}\n      <Link href=\"/\">\n        <Image\n          src=\"/pics/logo.png\"\n          alt=\"Logo\"\n          width={481}\n          height={639}\n          className=\"w-auto h-9 sm:h-12\"\n        />\n      </Link>\n\n      {/* Hamburger Menu Icon (visible on mobile) */}\n      <div className=\"sm:hidden cursor-pointer z-20\" onClick={toggleMenu}>\n        <Image\n          src=\"/pics/hamburgerMenu.png\"\n          alt=\"Menu\"\n          width={31}\n          height={40}\n        />\n      </div>\n\n      {/* Desktop Navigation (hidden on mobile) */}\n      <nav className=\"hidden sm:flex gap-5\">\n        {navLinks.map((link) => (\n          <Link\n            key={link.path}\n            href={link.path}\n            className={`transition-colors m-2.5 ${\n              pathname === link.path\n                ? \"text-[#2EFF6C]\"\n                : \"text-[#A9A9B3] hover:text-[#7E848F] \"\n            }`}\n          >\n            {link.name}\n          </Link>\n        ))}\n      </nav>\n\n      {/* Mobile Navigation (conditionally rendered) */}\n      {isMenuOpen && (\n        <div className=\"md:hidden pb-2 absolute top-16 right-0 w-full bg-black bg-opacity-95 shadow-md z-10\">\n          <div className=\"flex flex-col items-center\">\n            {navLinks.map((link) => (\n              <Link\n                key={link.path}\n                href={link.path}\n                className={`transition-colors px-5 py-3 ${\n                  pathname === link.path\n                    ? \"text-[#2EFF6C]\"\n                    : \"text-[#A9A9B3] hover:text-[#7E848F] \"\n                }`}\n                onClick={() => setIsMenuOpen(false)}\n              >\n                {link.name}\n              </Link>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Header;\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;;;AALA;;;;;AAOA,MAAM,WAAW;IACf;QAAE,MAAM;QAAQ,MAAM;IAAI;IAC1B;QAAE,MAAM;QAAiB,MAAM;IAAe;IAC9C;QAAE,MAAM;QAAS,MAAM;IAAS;CACjC;AAED,MAAM,SAAS;;IACb,MAAM,WAAW,CAAA,GAAA,qIAAA,CAAA,cAAW,AAAD;IAC3B,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE7C,MAAM,aAAa;QACjB,cAAc,CAAC;IACjB;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BAEb,6LAAC,+JAAA,CAAA,UAAI;gBAAC,MAAK;0BACT,cAAA,6LAAC,gIAAA,CAAA,UAAK;oBACJ,KAAI;oBACJ,KAAI;oBACJ,OAAO;oBACP,QAAQ;oBACR,WAAU;;;;;;;;;;;0BAKd,6LAAC;gBAAI,WAAU;gBAAgC,SAAS;0BACtD,cAAA,6LAAC,gIAAA,CAAA,UAAK;oBACJ,KAAI;oBACJ,KAAI;oBACJ,OAAO;oBACP,QAAQ;;;;;;;;;;;0BAKZ,6LAAC;gBAAI,WAAU;0BACZ,SAAS,GAAG,CAAC,CAAC,qBACb,6LAAC,+JAAA,CAAA,UAAI;wBAEH,MAAM,KAAK,IAAI;wBACf,WAAW,CAAC,wBAAwB,EAClC,aAAa,KAAK,IAAI,GAClB,mBACA,wCACJ;kCAED,KAAK,IAAI;uBARL,KAAK,IAAI;;;;;;;;;;YAcnB,4BACC,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAI,WAAU;8BACZ,SAAS,GAAG,CAAC,CAAC,qBACb,6LAAC,+JAAA,CAAA,UAAI;4BAEH,MAAM,KAAK,IAAI;4BACf,WAAW,CAAC,4BAA4B,EACtC,aAAa,KAAK,IAAI,GAClB,mBACA,wCACJ;4BACF,SAAS,IAAM,cAAc;sCAE5B,KAAK,IAAI;2BATL,KAAK,IAAI;;;;;;;;;;;;;;;;;;;;;AAiB9B;GAvEM;;QACa,qIAAA,CAAA,cAAW;;;KADxB;uCAyES","debugId":null}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Maanjaro/ShellmatesWriteUpBank/src/components/AnimatedBackground.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useRef } from 'react';\r\n\r\nconst AnimatedBackground = () => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    // Set canvas size\r\n    const resizeCanvas = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n    };\r\n\r\n    resizeCanvas();\r\n    window.addEventListener('resize', resizeCanvas);\r\n\r\n    // Matrix characters - including binary, hex, and hacker symbols\r\n    const matrix = \"01アカサタナハマヤラワABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%^&*()_+-={}[]|\\\\:;\\\"'<>,.?/~`\";\r\n    const matrixArray = matrix.split(\"\");\r\n\r\n    const fontSize = 14;\r\n    const columns = Math.floor(canvas.width / fontSize);\r\n\r\n    // Array to store the y position of each drop\r\n    const drops: number[] = [];\r\n\r\n    // Initialize drops\r\n    for (let x = 0; x < columns; x++) {\r\n      drops[x] = Math.random() * -100;\r\n    }\r\n\r\n    // Animation function\r\n    const draw = () => {\r\n      // Dark background with transparency for trail effect\r\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n      ctx.font = fontSize + 'px \"Courier New\", monospace';\r\n\r\n      // Loop over drops\r\n      for (let i = 0; i < drops.length; i++) {\r\n        // Random character\r\n        const text = matrixArray[Math.floor(Math.random() * matrixArray.length)];\r\n        \r\n        // Create gradient effect - brighter at the front of the drop\r\n        const gradient = ctx.createLinearGradient(0, drops[i] * fontSize - 100, 0, drops[i] * fontSize);\r\n        gradient.addColorStop(0, 'rgba(0, 255, 0, 0.1)');\r\n        gradient.addColorStop(0.8, 'rgba(0, 255, 0, 0.8)');\r\n        gradient.addColorStop(1, 'rgba(0, 255, 0, 1)');\r\n        \r\n        ctx.fillStyle = gradient;\r\n        \r\n        // Add some randomness to character brightness\r\n        if (Math.random() > 0.98) {\r\n          ctx.fillStyle = '#ffffff'; // Occasional white character\r\n        }\r\n        \r\n        // Draw the character\r\n        ctx.fillText(text, i * fontSize, drops[i] * fontSize);\r\n\r\n        // Send the drop back to the top randomly after it has crossed the screen\r\n        if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {\r\n          drops[i] = Math.random() * -100;\r\n        }\r\n\r\n        // Increment Y coordinate with slight randomness\r\n        drops[i] += 0.5 + Math.random() * 0.5;\r\n      }\r\n    };\r\n\r\n    // Floating particles for additional effect\r\n    const particles: Array<{x: number, y: number, vx: number, vy: number, life: number}> = [];\r\n    \r\n    const drawParticles = () => {\r\n      // Add new particles occasionally\r\n      if (Math.random() > 0.995) {\r\n        particles.push({\r\n          x: Math.random() * canvas.width,\r\n          y: Math.random() * canvas.height,\r\n          vx: (Math.random() - 0.5) * 0.5,\r\n          vy: (Math.random() - 0.5) * 0.5,\r\n          life: 100\r\n        });\r\n      }\r\n\r\n      // Draw and update particles\r\n      particles.forEach((particle, index) => {\r\n        ctx.fillStyle = `rgba(0, 255, 0, ${particle.life / 100 * 0.3})`;\r\n        ctx.fillRect(particle.x, particle.y, 1, 1);\r\n        \r\n        particle.x += particle.vx;\r\n        particle.y += particle.vy;\r\n        particle.life--;\r\n        \r\n        if (particle.life <= 0) {\r\n          particles.splice(index, 1);\r\n        }\r\n      });\r\n    };\r\n\r\n    // Combined animation\r\n    const animate = () => {\r\n      draw();\r\n      drawParticles();\r\n    };\r\n\r\n    // Start animation\r\n    const interval = setInterval(animate, 50);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n      window.removeEventListener('resize', resizeCanvas);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      className=\"fixed top-0 left-0 w-full h-full pointer-events-none z-[-1]\"\r\n      style={{ \r\n        background: 'linear-gradient(135deg, rgba(0, 0, 0, 0.95) 0%, rgba(0, 20, 0, 0.9) 50%, rgba(0, 0, 0, 0.95) 100%)',\r\n        opacity: 0.3\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AnimatedBackground;\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 290, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Maanjaro/ShellmatesWriteUpBank/src/components/HackerGridBackground.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useRef } from 'react';\r\n\r\nconst HackerGridBackground = () => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    // Set canvas size\r\n    const resizeCanvas = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n    };\r\n\r\n    resizeCanvas();\r\n    window.addEventListener('resize', resizeCanvas);\r\n\r\n    // Grid properties\r\n    const gridSize = 50;\r\n    let time = 0;\r\n\r\n    // Binary code rain\r\n    const binaryChars = ['0', '1'];\r\n    const columns = Math.floor(canvas.width / 10);\r\n    const drops: number[] = [];\r\n\r\n    for (let i = 0; i < columns; i++) {\r\n      drops[i] = Math.random() * -100;\r\n    }\r\n\r\n    const draw = () => {\r\n      // Clear canvas with dark background\r\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n      // Draw animated grid\r\n      ctx.strokeStyle = 'rgba(0, 255, 0, 0.1)';\r\n      ctx.lineWidth = 1;\r\n\r\n      // Vertical lines\r\n      for (let x = 0; x < canvas.width; x += gridSize) {\r\n        const offset = Math.sin(time * 0.001 + x * 0.01) * 5;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x + offset, 0);\r\n        ctx.lineTo(x + offset, canvas.height);\r\n        ctx.stroke();\r\n      }\r\n\r\n      // Horizontal lines\r\n      for (let y = 0; y < canvas.height; y += gridSize) {\r\n        const offset = Math.cos(time * 0.001 + y * 0.01) * 5;\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, y + offset);\r\n        ctx.lineTo(canvas.width, y + offset);\r\n        ctx.stroke();\r\n      }\r\n\r\n      // Binary rain\r\n      ctx.fillStyle = 'rgba(0, 255, 0, 0.8)';\r\n      ctx.font = '12px monospace';\r\n\r\n      for (let i = 0; i < drops.length; i++) {\r\n        const char = binaryChars[Math.floor(Math.random() * 2)];\r\n        ctx.fillText(char, i * 10, drops[i]);\r\n\r\n        if (drops[i] > canvas.height && Math.random() > 0.975) {\r\n          drops[i] = 0;\r\n        }\r\n        drops[i] += 0.5;\r\n      }\r\n\r\n      // Glitch effect lines\r\n      if (Math.random() > 0.98) {\r\n        const y = Math.random() * canvas.height;\r\n        const height = 2 + Math.random() * 3;\r\n        ctx.fillStyle = 'rgba(255, 0, 0, 0.3)';\r\n        ctx.fillRect(0, y, canvas.width, height);\r\n      }\r\n\r\n      time++;\r\n    };\r\n\r\n    const interval = setInterval(draw, 16); // ~60fps\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n      window.removeEventListener('resize', resizeCanvas);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      className=\"fixed top-0 left-0 w-full h-full pointer-events-none z-[-1]\"\r\n      style={{ \r\n        background: 'radial-gradient(circle at 50% 50%, rgba(0, 40, 0, 0.4) 0%, rgba(0, 0, 0, 0.9) 100%)',\r\n        opacity: 0.4\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default HackerGridBackground;\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 411, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Maanjaro/ShellmatesWriteUpBank/src/components/CircuitBackground.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useRef } from 'react';\r\n\r\nconst CircuitBackground = () => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    // Set canvas size\r\n    const resizeCanvas = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n    };\r\n\r\n    resizeCanvas();\r\n    window.addEventListener('resize', resizeCanvas);\r\n\r\n    // Circuit nodes\r\n    const nodes: Array<{x: number, y: number, connections: number[], pulse: number}> = [];\r\n    const nodeCount = 50;\r\n\r\n    // Initialize nodes\r\n    for (let i = 0; i < nodeCount; i++) {\r\n      nodes.push({\r\n        x: Math.random() * canvas.width,\r\n        y: Math.random() * canvas.height,\r\n        connections: [],\r\n        pulse: Math.random() * Math.PI * 2\r\n      });\r\n    }\r\n\r\n    // Create connections between nearby nodes\r\n    nodes.forEach((node, i) => {\r\n      nodes.forEach((otherNode, j) => {\r\n        if (i !== j) {\r\n          const distance = Math.sqrt(\r\n            Math.pow(node.x - otherNode.x, 2) + Math.pow(node.y - otherNode.y, 2)\r\n          );\r\n          if (distance < 150 && node.connections.length < 3) {\r\n            node.connections.push(j);\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    let time = 0;\r\n\r\n    const draw = () => {\r\n      // Clear canvas\r\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n      time += 0.02;\r\n\r\n      // Draw connections\r\n      ctx.lineWidth = 1;\r\n      nodes.forEach((node) => {\r\n        node.connections.forEach(connectionIndex => {\r\n          const connectedNode = nodes[connectionIndex];\r\n          const pulseIntensity = (Math.sin(time + node.pulse) + 1) / 2;\r\n          \r\n          const gradient = ctx.createLinearGradient(\r\n            node.x, node.y, connectedNode.x, connectedNode.y\r\n          );\r\n          gradient.addColorStop(0, `rgba(0, 255, 255, ${pulseIntensity * 0.3})`);\r\n          gradient.addColorStop(0.5, `rgba(0, 255, 0, ${pulseIntensity * 0.6})`);\r\n          gradient.addColorStop(1, `rgba(0, 255, 255, ${pulseIntensity * 0.3})`);\r\n          \r\n          ctx.strokeStyle = gradient;\r\n          ctx.beginPath();\r\n          ctx.moveTo(node.x, node.y);\r\n          ctx.lineTo(connectedNode.x, connectedNode.y);\r\n          ctx.stroke();\r\n        });\r\n      });\r\n\r\n      // Draw nodes\r\n      nodes.forEach(node => {\r\n        const pulseSize = 2 + Math.sin(time + node.pulse) * 1;\r\n        const pulseAlpha = (Math.sin(time + node.pulse) + 1) / 2;\r\n        \r\n        // Outer glow\r\n        ctx.beginPath();\r\n        ctx.arc(node.x, node.y, pulseSize * 2, 0, Math.PI * 2);\r\n        ctx.fillStyle = `rgba(0, 255, 255, ${pulseAlpha * 0.2})`;\r\n        ctx.fill();\r\n        \r\n        // Inner core\r\n        ctx.beginPath();\r\n        ctx.arc(node.x, node.y, pulseSize, 0, Math.PI * 2);\r\n        ctx.fillStyle = `rgba(0, 255, 0, ${0.8 + pulseAlpha * 0.2})`;\r\n        ctx.fill();\r\n      });\r\n\r\n      // Data packets moving along connections\r\n      if (Math.random() > 0.95) {\r\n        nodes.forEach((node) => {\r\n          if (node.connections.length > 0) {\r\n            const randomConnection = node.connections[Math.floor(Math.random() * node.connections.length)];\r\n            const targetNode = nodes[randomConnection];\r\n            \r\n            // Draw moving packet\r\n            const progress = (time * 2) % 1;\r\n            const packetX = node.x + (targetNode.x - node.x) * progress;\r\n            const packetY = node.y + (targetNode.y - node.y) * progress;\r\n            \r\n            ctx.beginPath();\r\n            ctx.arc(packetX, packetY, 2, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(255, 255, 0, ${1 - progress})`;\r\n            ctx.fill();\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n    const interval = setInterval(draw, 16);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n      window.removeEventListener('resize', resizeCanvas);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      className=\"fixed top-0 left-0 w-full h-full pointer-events-none z-[-1]\"\r\n      style={{ \r\n        background: 'linear-gradient(45deg, rgba(0, 0, 20, 0.9) 0%, rgba(0, 20, 0, 0.8) 50%, rgba(0, 0, 20, 0.9) 100%)',\r\n        opacity: 0.6\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CircuitBackground;\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 567, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Maanjaro/ShellmatesWriteUpBank/src/components/BackgroundSwitcher.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useState } from 'react';\r\nimport AnimatedBackground from './AnimatedBackground';\r\nimport HackerGridBackground from './HackerGridBackground';\r\nimport CircuitBackground from './CircuitBackground';\r\n\r\ntype BackgroundType = 'matrix' | 'grid' | 'circuit';\r\n\r\nconst BackgroundSwitcher = () => {\r\n  const [backgroundType] = useState<BackgroundType>('matrix'); // Default to matrix\r\n\r\n  const renderBackground = () => {\r\n    switch (backgroundType) {\r\n      case 'matrix':\r\n        return <AnimatedBackground />;\r\n      case 'grid':\r\n        return <HackerGridBackground />;\r\n      case 'circuit':\r\n        return <CircuitBackground />;\r\n      default:\r\n        return <AnimatedBackground />;\r\n    }\r\n  };\r\n\r\n  return renderBackground();\r\n};\r\n\r\nexport default BackgroundSwitcher;\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;;;AALA;;;;;AASA,MAAM,qBAAqB;;IACzB,MAAM,CAAC,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAkB,WAAW,oBAAoB;IAEjF,MAAM,mBAAmB;QACvB,OAAQ;YACN,KAAK;gBACH,qBAAO,6LAAC,2IAAA,CAAA,UAAkB;;;;;YAC5B,KAAK;gBACH,qBAAO,6LAAC,6IAAA,CAAA,UAAoB;;;;;YAC9B,KAAK;gBACH,qBAAO,6LAAC,0IAAA,CAAA,UAAiB;;;;;YAC3B;gBACE,qBAAO,6LAAC,2IAAA,CAAA,UAAkB;;;;;QAC9B;IACF;IAEA,OAAO;AACT;GAjBM;KAAA;uCAmBS","debugId":null}}]
}